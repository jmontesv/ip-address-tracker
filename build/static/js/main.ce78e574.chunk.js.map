{"version":3,"sources":["img/icon-location.svg","config.js","context/SearchStateContext.jsx","components/IpSearch.jsx","components/Header.jsx","components/Tab.jsx","components/ElementBordered.jsx","components/HorizontalCard.jsx","components/MapLocation.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","apiKey","SearchContext","React","createContext","SearchStateProvider","children","useState","isFocusSinceMobile","setIsFocusSinceMobile","isInputFocus","setIsInputFocus","useEffect","window","navigator","userAgent","includes","Provider","value","IpSearch","onChangeIp","inputRef","useRef","useContext","className","ref","type","placeholder","onFocus","onBlur","current","RegExp","test","Header","handleIp","Tab","ElementBordered","HorizontalCard","locationData","Object","keys","length","ip","location","city","region","postalCode","timezone","isp","iconPosition","L","icon","iconUrl","require","MapLocation","latitude","longitude","center","zoom","TileLayer","url","Marker","position","App","setIp","error","setError","setLocationData","getLocationRequest","then","res","json","domains","catch","err","fetch","currentIp","lat","lng","Boolean","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.ce78e574.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon-location.ff171469.svg\";","const apiKey = \"at_KJVrwBsYaXCYmcbCUJYDUH007rxv7\";\r\nexport default apiKey;\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nexport const SearchContext = React.createContext();\r\n\r\nexport default function SearchStateProvider({ children }) {\r\n  const [isFocusSinceMobile, setIsFocusSinceMobile] = useState(null);\r\n  const [isInputFocus, setIsInputFocus] = useState(false);\r\n\r\n  useEffect(() => {\r\n    window.navigator.userAgent.includes(\"Mobile\")\r\n      ? setIsFocusSinceMobile(true)\r\n      : setIsFocusSinceMobile(false);\r\n  }, []);\r\n\r\n  return (\r\n    <SearchContext.Provider\r\n      value={{\r\n        isFocusSinceMobile,\r\n        isInputFocus,\r\n        setIsInputFocus,\r\n      }}\r\n    >\r\n      {children}\r\n    </SearchContext.Provider>\r\n  );\r\n}\r\n","import React, { useRef, useContext } from \"react\";\r\nimport { SearchContext } from \"../context/SearchStateContext\";\r\nimport \"./styles/IpSearch.css\";\r\n\r\nexport default function IpSearch({ onChangeIp }) {\r\n  const inputRef = useRef(null);\r\n  const { setIsInputFocus } = useContext(SearchContext);\r\n  const validateInput = (value) => {\r\n    if (new RegExp(/^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$/).test(value)) {\r\n      onChangeIp(value);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"ip-search\">\r\n      <input\r\n        ref={inputRef}\r\n        className=\"ip-search__field\"\r\n        type=\"text\"\r\n        placeholder=\"Search for any IP address or domain\"\r\n        onFocus={() => {\r\n          setIsInputFocus(true);\r\n        }}\r\n        onBlur={() => {\r\n          setIsInputFocus(false);\r\n        }}\r\n      ></input>\r\n      <span>\r\n        <button\r\n          onFocus={() => {\r\n            validateInput(inputRef.current.value);\r\n          }}\r\n          className=\"button-submit\"\r\n        ></button>\r\n      </span>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport IpSearch from \"./IpSearch\";\r\nimport \"./styles/Header.css\";\r\n\r\nexport default function Header({ handleIp }) {\r\n  return (\r\n    <div className=\"header\">\r\n      <h1 className=\"header__title\">IP Address Tracker</h1>\r\n      <IpSearch onChangeIp={handleIp} />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./styles/Tab.css\";\r\n\r\nexport default function Tab({ children }) {\r\n  return <div className=\"tab\">{children}</div>;\r\n}\r\n","import React from \"react\";\r\nimport \"./styles/ElementBordered.css\";\r\n\r\nexport default function ElementBordered({ children }) {\r\n  return <div className=\"border-element\">{children}</div>;\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport { SearchContext } from \"../context/SearchStateContext\";\r\nimport Tab from \"./Tab\";\r\nimport \"./styles/HorizontalCard.css\";\r\nimport ElementBordered from \"./ElementBordered\";\r\n\r\nexport default function HorizontalCard({ locationData }) {\r\n  const { isFocusSinceMobile, isInputFocus } = useContext(SearchContext);\r\n  return (\r\n    <div\r\n      className={\r\n        isInputFocus && isFocusSinceMobile\r\n          ? \"horizontal-card--hidden\"\r\n          : \"horizontal-card\"\r\n      }\r\n    >\r\n      {Object.keys(locationData).length > 0 && (\r\n        <>\r\n          <Tab>\r\n            <h6 className=\"tab__title\">IP ADDRESS</h6>\r\n            <p className=\"tab__content\">{locationData.ip}</p>\r\n          </Tab>\r\n          <Tab>\r\n            <ElementBordered>\r\n              <h6 className=\"tab__title\">LOCATION</h6>\r\n              <div className=\"tab__content\">\r\n                {locationData.location.city +\r\n                  \", \" +\r\n                  locationData.location.region}\r\n                <div>{locationData.location.postalCode}</div>\r\n              </div>\r\n            </ElementBordered>\r\n          </Tab>\r\n          <Tab>\r\n            <ElementBordered>\r\n              <h6 className=\"tab__title\">TIMEZONE</h6>\r\n              <p className=\"tab__content\">\r\n                {\"UTC\" + locationData.location.timezone}\r\n              </p>\r\n            </ElementBordered>\r\n          </Tab>\r\n          <Tab>\r\n            <ElementBordered>\r\n              <h6 className=\"tab__title\">ISP</h6>\r\n              <p className=\"tab__content\">{locationData.isp}</p>\r\n            </ElementBordered>\r\n          </Tab>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./styles/Map.css\";\r\nimport { Map, TileLayer, Marker } from \"react-leaflet\";\r\nimport L from \"leaflet\";\r\n\r\nexport const iconPosition = L.icon({\r\n  iconUrl: require(\"../img/icon-location.svg\"),\r\n});\r\nexport default function MapLocation({ latitude, longitude }) {\r\n  return (\r\n    <>\r\n      {latitude && longitude && (\r\n        <Map className=\"map-wrapper\" center={[latitude, longitude]} zoom={20}>\r\n          <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\r\n          <Marker icon={iconPosition} position={[latitude, longitude]} />\r\n        </Map>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport apiKey from \"./config\";\nimport Header from \"./components/Header\";\nimport HorizontalCard from \"./components/HorizontalCard\";\nimport MapLocation from \"./components/MapLocation\";\nimport SearchStateProvider from \"./context/SearchStateContext\";\n\nfunction App() {\n  const [ip, setIp] = useState(\"\");\n  const [error, setError] = useState(false);\n  const [locationData, setLocationData] = useState({});\n  useEffect(() => {\n    getLocationRequest(ip)\n      .then((res) => res.json())\n      .then(({ ip, location, domains }) => {\n        setLocationData({ ip, location, domains });\n      })\n      .catch((err) => {\n        setError(err);\n      });\n  }, [ip]);\n\n  const handleIp = (currentIp) => {\n    setIp(currentIp);\n  };\n  const getLocationRequest = (ip) => {\n    return ip === \"\"\n      ? fetch(`https://geo.ipify.org/api/v1?apiKey=${apiKey}`)\n      : fetch(`https://geo.ipify.org/api/v1?apiKey=${apiKey}&ipAddress=${ip}`);\n  };\n  return (\n    <>\n      <SearchStateProvider>\n        <Header handleIp={handleIp} />\n        <div className=\"main\">\n          {!error && (\n            <>\n              <HorizontalCard locationData={locationData} />\n              <MapLocation\n                latitude={locationData?.location?.lat}\n                longitude={locationData?.location?.lng}\n              />\n            </>\n          )}\n        </div>\n      </SearchStateProvider>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}